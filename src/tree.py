import networkx as nx

if __name__ == '__main__':
    n = 872
    data = '''
633 397
336 423
583 800
457 20
707 797
61 1
494 672
382 140
282 62
782 188
463 478
571 456
531 8
119 294
863 190
49 205
224 70
88 118
80 139
854 273
66 74
234 155
789 120
225 353
446 767
346 163
796 779
66 450
130 38
228 793
262 263
41 204
21 421
630 120
210 424
15 10
698 778
404 663
489 287
331 214
517 655
355 176
391 416
19 44
518 598
194 161
45 49
683 156
177 274
9 23
311 837
25 605
206 265
21 28
468 690
485 694
211 338
211 749
227 405
485 29
376 271
624 661
49 825
81 19
486 624
90 57
261 597
440 170
470 564
317 482
798 467
766 563
341 499
179 226
110 238
52 467
343 258
237 5
81 524
777 398
669 727
680 36
99 701
713 227
115 146
414 824
20 71
835 634
122 707
67 192
15 66
95 36
548 247
277 520
146 173
94 8
28 334
389 190
525 154
587 650
666 384
208 813
799 119
119 159
221 352
73 399
25 344
870 409
692 438
557 178
303 715
347 40
696 434
267 615
229 668
593 732
413 386
560 496
11 4
16 10
201 461
45 39
42 40
644 238
30 4
483 119
107 82
675 738
667 450
103 846
596 56
365 433
40 8
46 101
552 97
519 103
123 206
731 454
82 39
97 253
250 118
578 226
46 5
278 601
335 24
314 193
82 822
632 490
383 806
359 488
490 297
735 564
783 322
491 266
370 628
581 708
388 207
620 481
174 58
261 130
377 69
116 113
171 293
530 329
787 661
607 225
125 73
12 34
50 432
141 102
526 449
475 187
46 182
31 11
5 43
76 34
420 447
706 106
486 86
361 395
244 273
87 312
9 6
434 56
149 428
32 216
500 300
28 36
231 256
11 436
85 402
355 741
563 170
161 127
484 554
32 1
61 196
498 551
587 189
847 817
160 665
179 547
110 248
518 788
826 201
84 19
646 103
152 838
368 87
48 35
745 189
315 700
412 763
195 386
528 364
652 553
382 649
2 59
861 716
186 3
144 332
738 751
181 390
177 178
75 133
457 627
445 622
336 315
243 251
91 604
776 638
217 246
534 430
480 626
78 51
38 679
208 243
99 32
21 292
804 232
15 91
37 11
641 856
267 183
523 23
321 277
634 671
6 20
19 77
358 16
795 461
494 213
155 101
277 442
130 357
351 521
624 638
391 2
208 493
618 26
53 80
513 412
409 248
398 140
786 829
103 190
247 309
324 191
5 83
227 171
199 775
427 538
5 754
51 126
871 769
218 11
221 363
685 145
589 116
556 814
774 621
177 69
22 33
414 242
165 278
207 206
314 831
85 53
308 121
7 5
503 334
67 418
106 487
816 315
573 678
398 658
103 101
555 651
571 606
99 329
604 811
231 284
92 210
102 20
451 473
19 35
682 230
24 635
199 318
267 300
172 25
101 463
704 52
43 185
266 223
67 211
583 743
583 753
108 195
643 333
471 152
168 603
104 68
60 279
370 460
110 55
541 25
613 93
317 13
1 4
201 163
22 498
466 435
362 241
297 724
134 299
437 228
819 30
167 38
683 750
236 609
695 164
507 307
281 191
53 476
176 45
8 722
328 240
97 288
112 117
170 65
545 20
76 111
18 577
322 518
60 34
586 471
582 523
72 100
282 365
73 809
22 17
349 311
18 11
19 9
97 4
103 275
214 802
504 509
372 371
59 68
653 391
13 131
159 285
636 568
272 133
380 11
853 779
274 756
345 114
128 191
93 4
456 74
836 48
581 163
675 657
616 104
62 549
90 858
304 186
589 760
25 189
254 73
233 48
67 132
779 512
280 211
31 307
157 435
271 69
699 225
67 231
364 595
579 559
72 53
237 387
25 8
643 726
4 10
703 135
225 733
468 687
773 106
20 148
41 32
152 348
312 392
225 92
302 536
72 149
64 65
351 315
859 28
843 63
739 525
160 720
58 21
280 555
436 747
764 82
849 27
616 752
684 348
89 55
299 354
113 101
688 152
220 184
510 41
79 361
845 211
379 282
608 271
78 313
117 341
14 209
105 818
160 112
20 128
46 120
217 302
53 42
87 83
76 431
280 640
42 350
54 213
59 166
16 17
643 711
88 156
686 420
25 92
407 506
170 283
619 215
158 459
496 851
664 459
100 698
286 242
260 25
269 61
583 180
677 651
462 234
584 109
118 657
187 161
702 56
784 690
183 35
55 301
19 277
33 257
301 656
66 119
742 733
865 383
537 110
479 673
400 143
53 122
410 104
137 57
574 585
573 292
474 481
127 108
479 371
68 529
169 147
496 810
253 502
15 326
13 229
114 147
842 493
240 45
600 569
722 833
49 112
203 71
366 148
212 182
115 99
716 675
337 593
162 114
47 36
729 125
6 1
8 3
805 391
200 100
404 172
55 46
840 388
429 299
515 416
114 79
867 400
77 202
270 306
446 392
258 91
23 69
106 383
516 175
419 248
26 303
33 145
387 532
35 496
56 79
235 323
449 310
81 648
197 127
365 477
128 150
464 144
144 164
697 480
841 549
1 2
495 176
240 785
175 15
82 157
27 181
348 381
236 43
231 375
848 523
114 371
98 31
820 349
235 415
370 113
570 394
610 386
602 97
736 40
798 852
588 502
447 568
122 761
319 196
441 160
625 629
719 625
91 565
128 198
235 199
866 77
13 1
337 87
401 147
468 373
294 333
420 246
647 378
691 237
492 306
143 128
61 815
131 553
152 68
235 385
101 221
270 765
110 567
359 327
61 642
221 356
21 397
184 217
393 725
807 212
144 322
12 105
109 497
339 97
470 133
193 51
279 295
290 100
823 672
96 106
440 769
165 164
101 142
721 730
794 159
371 378
270 709
17 56
311 360
755 22
153 834
277 289
9 438
313 540
136 4
325 34
132 369
469 30
228 145
537 757
512 80
27 16
25 827
199 166
595 641
641 710
271 327
43 242
214 296
123 29
291 458
214 594
517 508
153 12
12 14
64 427
145 443
21 569
159 590
292 316
714 828
839 757
781 268
103 184
2 3
26 625
841 844
4 340
358 408
296 762
102 393
746 301
8 52
160 803
424 480
654 20
634 17
392 453
20 86
11 12
763 808
311 744
436 770
87 342
203 780
129 5
615 721
718 425
73 66
786 637
37 676
208 168
232 95
674 446
109 64
427 451
104 138
734 435
343 430
746 772
270 48
850 828
351 556
455 332
574 461
792 398
109 310
219 140
50 46
238 373
2 5
173 180
546 368
12 21
35 54
511 106
575 288
154 26
759 650
543 198
194 411
435 689
22 135
522 124
535 510
612 165
313 599
34 57
444 101
144 29
208 864
435 505
468 728
230 63
158 384
25 168
270 396
832 451
55 712
43 67
639 637
56 550
58 255
337 611
545 562
659 643
448 4
477 504
127 311
75 51
134 403
156 262
406 261
521 542
90 222
454 356
860 601
668 714
50 62
10 24
455 621
21 158
566 202
412 267
539 35
370 771
38 13
214 91
287 240
364 183
474 431
140 108
717 569
223 32
413 527
160 791
63 23
662 173
815 857
716 801
452 342
862 99
705 498
758 330
374 77
501 467
40 241
150 188
93 394
623 406
132 422
645 243
168 171
670 768
270 868
72 425
65 121
88 83
252 183
257 790
681 583
19 70
669 273
35 108
87 821
39 239
378 576
151 78
370 417
748 367
24 29
660 43
131 330
142 264
23 124
26 5
533 229
350 869
172 291
87 163
134 48
817 586
439 399
559 631
125 245
637 431
297 36
383 812
692 693
211 514
244 210
'''
    G=nx.Graph()

    for line in filter(None, data.split('\n')):
        values = line.split(' ')
        if len(values) == 2:
            G.add_edge(values[0], values[1])

    nodes = G.number_of_nodes()
    number_of_edges = len(nx.connected_components(G)) -1
    number_of_edges += (n - nodes)
    print number_of_edges
from fasta.Fasta import read_fasta
import decimal

context = decimal.getcontext()
context.prec = 12
context.rounding = decimal.ROUND_HALF_DOWN

def is_transition(orig, found):
    if (orig == 'A' and found == 'G'):
        return True
    if (orig == 'G' and found == 'A'):
        return True
    if (orig == 'C' and found == 'T'):
        return True
    if (orig == 'T' and found == 'C'):
        return True
    return False

def is_transversion(orig, found):
    if (orig == 'A' and found == 'T'):
        return True
    if (orig == 'T' and found == 'A'):
        return True
    if (orig == 'A' and found == 'C'):
        return True
    if (orig == 'C' and found == 'A'):
        return True
    if (orig == 'C' and found == 'G'):
        return True
    if (orig == 'G' and found == 'C'):
        return True
    if (orig == 'T' and found == 'G'):
        return True
    if (orig == 'G' and found == 'T'):
        return True
    return False

if __name__ == '__main__':
    data = '''
>Rosalind_4526
TGTGGGACAAGCCCAATCGTGCCCACTTTTATTGATACTCTTGCTGCGACCTAAACATCG
TTCTGTGGCAGCCCAGTATTCTCATCCAATCCACACCGCACCCTATGAGATATTATAGAT
CCGGGGAGCACGCGAAAAGCCGTCCTAGCTAATAGTTCATGCGCAGGGGCTCGCGGCATC
CTAAGTAGACTATTTGCCCGCTCTTCATACCCGCAACTAAACCCGAGATCTGCTCGGCGT
ACCGAAGATTCCCCTTGGACTTTGTAGTCCTGTGTGCCCGGATTTCCAGTCAGAGTTTGC
GCCATAATGTGCCACAACTGGTGCTACGCCGACTATGCGTGTTCAGCGAAGCTCCGGTTC
ATGTTATTAGTACCAAAGCGGAATCGTCAGTTATTTACGGCATCATGTCTCAAGCAACCT
ACGCCATGGTTGTGACTGTGTCAGGATTAGGTATCAACGAGTGAGATATCGAGTCAGTTA
ATCTTTCCACGCTTCACTTTCTTGCATTTATCCGGGTTCCTATGAACTTTTGTGTTTCTA
CATGCCAATGCATATGTTATTCCCCAAGTTCCCGTCGTTGTGCAGCTATCGAGAAAGCTA
CACCGACAGGGTTAAGTGGGTCTGATCTAGCTTACATCTATCATCGTGAACAGACATCGA
TGCGATAGTATATAACGAAAAGAATCGGCTAGTGCCTTGTACTGGGCCCTTTTTTACTCT
GTTGTGTAACTAAAGGTGTTAACGTTCTAGTCGCTAGCATACCGTCCCTTCTATTAGTCT
CTTCTTCGAGAGAGAACGACGTCCAGCATGATTGTGTTGGCTTTCGCTGGTTAAGCTCAT
TACCATAGCCCTCGACTCACAGGCCTAATCTAATACGCAAAACTCGGCCGGGTTTCTAGC
CGGCTTCCCGGGCTGCCTACCGCTTGGTCAGTTGCGTAA
>Rosalind_7670
TGTGGAACAGGCCCGATCGCGCCTGCCTTCCTTGATATTCTGGCTTCGACCTAAGTTCTG
TTCTACACCAGCTCAGTAATCTCTTCCAATCCACTCCGTACCTTGCAAAATGTTACAGAT
TCAGGAGGAATGAAAAGGAGCGGCCTGAATAATTGTACATGCGCAGAGGTTCGCGGCATC
CTAAGTGGACTATTCGCCCGCGCTTGACGCTCGCGATCACATCCCCAATCCACCCGGTAT
ACCGACGGTTTCTTCAGGACCTTTCAGTCCAATATGTGCGAATCTCCGGTCAGGGTCTGC
GCAGTAACGTGATCCAACTAGTGCTATGTCAACTATGCGTCTTCGACGGGGCTCGGGATC
ATGTTGGTGTTACCAAAGCGGAGCTGTGAGTTATTTACGGCCACATGTCTCATGGAACCT
AAGCCATGGTGGTGACTGCGCCGGGGCTGTGTATCCTCGACTAAGGCTTTGAACCAATTA
ATCTTCCCACAATACATGTTATCGCTCCTGTCTGAATTCCTTTGAACCTTTTCGTTCTTA
TATGCAAATGCGTTTGTTATTCCGCAGGTTCCCGTCGTTATACCGCTATCGAAAAAGCTA
AACCGAGAGGGTTGGGCGAGTCTATTACATCTTATACCTGTCGCCGTGAGCGGATACCGA
TGTGATGAGACATAACGAGAGGCGCCGGCCAGTGCCTAGCAGTGGGTCCCTCTTTACTCC
CTTATGTGGCTAAAGGTGCAAAGGGTCAAATCACTTGAATACCGTCTTCTCTACCAATCT
CTACTTCGAGGCTAAACGACGCCTAGAACAGCTATGTCCGTTCTTTCTGATTATGTTCGC
TACCGCAGGCCTCGATTCACGGGTTCGATCTCTTGCACAATACTCGACCGGATTTCCAGC
CGGTTTTCCAGACTGGCTACCGCTTACCCAGTTGCGTGA
'''
    seqs = read_fasta(data)
    transitions = 0
    transversions = 0
    ref = seqs[0].sequence
    other = seqs[1].sequence

    for i in range(len(ref)):
        if (is_transition(ref[i], other[i])):
            transitions += 1
        elif (is_transversion(ref[i], other[i])):
            transversions += 1

    out = decimal.Decimal(decimal.Decimal(transitions) / decimal.Decimal(transversions))
    print out